//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/script/StarterAssets.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StarterAssets: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StarterAssets()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StarterAssets"",
    ""maps"": [
        {
            ""name"": ""Capsule"",
            ""id"": ""9fb583af-d22e-47e1-a6b6-a96ef0818055"",
            ""actions"": [
                {
                    ""name"": ""Shooting"",
                    ""type"": ""PassThrough"",
                    ""id"": ""555f64b3-c853-4ec5-a7f1-a8b6dc3fb5bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bec6c00c-c680-4921-9e8d-352fde361f93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c586cf72-44a5-4462-bc27-1106d79187b4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae441ea8-f73a-4cc7-bdb2-4b6cfc778086"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Capsule
        m_Capsule = asset.FindActionMap("Capsule", throwIfNotFound: true);
        m_Capsule_Shooting = m_Capsule.FindAction("Shooting", throwIfNotFound: true);
        m_Capsule_Aiming = m_Capsule.FindAction("Aiming", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Capsule
    private readonly InputActionMap m_Capsule;
    private List<ICapsuleActions> m_CapsuleActionsCallbackInterfaces = new List<ICapsuleActions>();
    private readonly InputAction m_Capsule_Shooting;
    private readonly InputAction m_Capsule_Aiming;
    public struct CapsuleActions
    {
        private @StarterAssets m_Wrapper;
        public CapsuleActions(@StarterAssets wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shooting => m_Wrapper.m_Capsule_Shooting;
        public InputAction @Aiming => m_Wrapper.m_Capsule_Aiming;
        public InputActionMap Get() { return m_Wrapper.m_Capsule; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CapsuleActions set) { return set.Get(); }
        public void AddCallbacks(ICapsuleActions instance)
        {
            if (instance == null || m_Wrapper.m_CapsuleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CapsuleActionsCallbackInterfaces.Add(instance);
            @Shooting.started += instance.OnShooting;
            @Shooting.performed += instance.OnShooting;
            @Shooting.canceled += instance.OnShooting;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
        }

        private void UnregisterCallbacks(ICapsuleActions instance)
        {
            @Shooting.started -= instance.OnShooting;
            @Shooting.performed -= instance.OnShooting;
            @Shooting.canceled -= instance.OnShooting;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
        }

        public void RemoveCallbacks(ICapsuleActions instance)
        {
            if (m_Wrapper.m_CapsuleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICapsuleActions instance)
        {
            foreach (var item in m_Wrapper.m_CapsuleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CapsuleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CapsuleActions @Capsule => new CapsuleActions(this);
    public interface ICapsuleActions
    {
        void OnShooting(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
    }
}
